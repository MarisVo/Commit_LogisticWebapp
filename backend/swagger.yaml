swagger: "2.0"
info:
  description: "APIs of Logistic Web Service"
  version: "1.0.0"
  title: "Logistic Web Service"
  contact:
    email: "d.bed11@gptgdt.net"
host: "localhost:8000"
basePath: "/api"
schemes:
- "https"
- "http"
tags:
- name: "auth"
  description: "Endpoint Authentication"
- name: "about"
  description: "Endpoint AboutUs"
- name: "contactUs"
  description: "Endpoint ContactUs"
- name: "tracking"
  description: "Tracking feature"
- name: "public"
  description: "Public assets of web service"
- name: "commitment"
  description: "Endpoint Commitment"
- name: "partner"
  description: "Endpoint Partner"
- name: "message"
  description: "Endpoint Message"
- name: "warehouse"
  description: "Endpoint Warehouse"
- name: "participant"
  description: "Endpoint Participant"
- name: "quote"
  description: "Endpoint Quote"
- name: "career"
  description: "Endpoint Career"
- name: "department"
  description: "Endpoint Department"
- name: "applicant"
  description: "Endpoint Applicant"
- name: "feature"
  description: "Endpoint Feature"
paths:
  /auth/verify-token:
    post:
      tags:
      - "auth"
      summary: "Verify the post token, if it's expired, refresh token"
      produces:
        - application/json
      consumes:
        - application/json
      parameters:
      - in: body
        name: token
        required: true
        schema:
          type: object
          properties:
            accessToken:
              type: string
            refreshToken:
              type: string
      responses:
        200:
          description: Verify token successfully.
          schema:
            type: object
            example: {
              "accessToken":"123456",
              "user":{
                "id":"userId",
                "email":"email",
                "phone":"phone",
                "role":"role",
              }
            }
        401:
          description: Unauthorized.
  /auth/register:
    post:
      tags:
      - "auth"
      summary: "Register customer"
      produces:
        - application/json
      consumes:
        - application/json
        - multipart/form-data
      parameters:
      - in: body
        name: customer
        required: true
        schema:
          type: object
          properties:
            name:
              type: string
            email:
              type: string
            phone:
              type: string
            password:
              type: string
            address:
              type: string
            description:
              type: string
            customer_type:
              type: string
              enum: ['business', 'passers', 'intermediary']
            verify_op:
              type: string
              enum: ['email', 'phone']
      responses:
        200:
          description: send otp code successfully.
          schema:
            type: object
            example: {
              "userId":"verifyId",
            }
        400:
          description: Send OTP failed.
  /auth/verify-otp:
    post:
      tags:
        - "auth"
      summary: Verify OTP send through email/phone number.
      consumes:
        - application/json
      parameters:
      - in: body
        name: otp
        required: true
        schema:
          type: object
          properties:
            userId:
              type: string
            otp:
              type: string
      responses:
        200:
          description: user registered successfully.
        400:
          description: validate failed.
  /auth/update-otp:
    post:
      tags:
        - "auth"
      summary: Update OTP send through email/phone number.
      produces:
        - application/json
      consumes:
        - application/json
      parameters:
      - in: body
        name: otp
        required: true
        schema:
          type: object
          properties:
            userId:
              type: string
            verify_op:
              type: string
              enum: ['email','phone']
      responses:
        200:
          description: update otp successfully.
        400:
          description: Send OTP failed.
  /auth/login:
    post:
      tags:
        - "auth"
      summary: Customer login with email/phone and password.
      produces:
        - application/json
      consumes:
        - application/json
        - multipart/form-data
      parameters:
      - in: body
        name: user
        required: true
        schema:
          type: object
          properties:
            email:
              type: string
            phone:
              type: string
            password:
              type: string
      responses:
        200:
          description: Login successfully.
          schema:
            type: object
            example: {
              "accessToken":"string",
              "refreshToken":"string",
              "user": {
                "id":"string",
                "email":"string",
                "phone":"string",
                "role":{},
              }
            }
        400:
          description: email/phone or password is wrong.
        403:
          description: your role is not valid. access denied.
  /auth/staff-login:
    post:
      tags:
        - "auth"
      summary: Staff login with email/phone and password.
      produces:
        - application/json
      consumes:
        - application/json
        - multipart/form-data
      parameters:
      - in: body
        name: user
        required: true
        schema:
          type: object
          properties:
            email:
              type: string
            phone:
              type: string
            password:
              type: string
      responses:
        200:
          description: Login successfully.
          schema:
            type: object
            example: {
              "accessToken":"string",
              "refreshToken":"string",
              "user": {
                "id":"string",
                "email":"string",
                "phone":"string",
                "role":{},
              }
            }
        400:
          description: email/phone or password is wrong.
        403:
          description: your role is not valid. access denied.
  /auth/forgot-pw:
    post:
      tags:
        - auth
      summary: help users renew their password
      produces:
        - application/json
      consumes:
        - application/json
        - multipart/form-data
      parameters:
      - in: body
        name: info
        required: true
        schema:
          type: object
          properties:
            email:
              type: string
            phone:
              type: string
      responses:
        200:
          description: generate new password successfully.
        400:
          description: send new password failed.
        404:
          description: email/phone doesn't exist.
  /auth/change-pw:
    put:
      tags:
        - auth
      summary: user change current password
      produces:
        - application/json
      consumes:
        - application/json
        - multipart/form-data
      parameters:
      - in: body
        name: info
        required: true
        schema:
          type: object
          properties:
            oldPw:
              type: string
            newPw:
              type: string
            verify_password:
              type: string
      responses:
        200:
          description: change your password successfully.
        400:
          description: current password isn't correct.
      security:
        - bearerAuth: []
  /about:
    get:
      tags:
        - about
      summary: get aboutUs information
      produces:
        - application/json
      responses:
        200:
          description: get about information successfully.
          schema:
            type: object
            example: {
              "description": "string",
              "vision": "string",
              "values": "string",
              "logo": "path",
              "banners": ["path1", "path2"],
            }
        400:
          description: about information is not found.
  /contactUs:
    get:
      tags:
        - contactUs
      summary: get contactUs information
      produces:
        - application/json
      responses:
        200:
          description: get contact information successfully.
          schema:
            type: object
            example: {
              "address":"string",
              "phone":"phone",
              "email":"email",
              "facebook":"url",
              "instagram":"url",
              "tiktok":"url",
              "youtube":"url",
            }
        400:
          description: contact information is not found.
  /tracking/postage:
    post:
      tags:
        - tracking
      summary: customer look up a postage
      produces:
        - application/json
      consumes:
        - application/json
        - multipart/form-data
      parameters:
      - in: body
        name: information
        required: true
        schema:
          type: object
          properties:
            formProvince:
              type: string
            fromDistrict:
              type: string
            fromWard:
              type: string
            toProvince:
              type: string
            toDistrict:
              type: string
            toWard:
              type: string
            unit:
              type: string
              enum: ['kg','m3','ton']
            quantity:
              type: number
            serviceId:
              type: string
            serviceName:
              type: string
      responses:
        200:
          description: calculate shipment fee successfully.
          schema:
            type: object
            example: {
              "result": 400000,
            }
        400:
          description: the service is not exist. / the service don't support this road.
  /tracking/order/{lstOrderId}:
    get:
      tags:
        - tracking
      summary: get list of order
      produces:
        - application/json
      parameters:
      - in: path
        name: lstOrderId
        type: string
        required: true
        description: string of list of OrderIDs, which seperate by '&'
      responses:
        200:
          description: request successfully
          schema:
            type: object
            example: {
              "orders": ["order1", "order2"],
              "success": 5,
              "failure": 2,
            }
  /tracking/warehouse:
    get:
      tags:
        - tracking
      summary: get list of warehouses by province and district query
      produces:
        - application/json
      parameters:
      - in: query
        name: province
        type: string
        required: true
      - in: query
        name: district
        type: string
        required: true
      responses:
        200:
          description: request successfully
          schema:
            type: object
            example: {
              "warehouses": ['warehouse1', 'warehouse2']
            }
  /tracking/service/{serviceId}:
    get:
      tags:
        - tracking
      summary: get pricelist of service
      produces:
        - application/json
      parameters:
      - in: path
        name: serviceId
        type: string
        required: true
        description: serviceId of request service
      responses:
        200:
          description: request successfully
          schema:
            type: object
            example: {
              "serviceWithUniquePriceFiles": ["pricelist1","pricelist2"]
            }
        400:
          description: not exist.
  /public/uploads/{dirName}/{fileName}:
    get:
      tags:
        - public
      summary: get uploaded resource
      parameters:
      - in: path
        name: dirName
        type: string
        required: true
        description: directory name of request file
      - in: path
        name: fileName
        type: string
        required: true
        description: file name of request file
      responses:
        200:
          description: resource file downloaded
          schema:
            type: file
  /public/{dirName}/{fileName}:
    get:
      tags:
        - public
      summary: get public assets
      parameters:
      - in: path
        name: dirName
        type: string
        required: true
        description: directory name of request file
      - in: path
        name: fileName
        type: string
        required: true
        description: file name of request file
      responses:
        200:
          description: resource file downloaded
          schema:
            type: file
  /commitment:
    get:
      tags:
        - "commitment"
      summary: get commitments
      produces:
        - application/json
      parameters:
        - in: query
          name: limit
          type: string
          description: limit number of commitment
        - in: query
          name: sortBy
          type: string
          description: sort in order (heading, -updatedAt)
        - in: query
          name: keyword
          type: string
          description: search by keyword
      responses:
        200:
          description: get commitments successfully.
          schema:
            type: object
            example: {
              "heading": "string",
              "logo": "path",
              "detail": "string",              
            }
        400:
          description: commitment is not found.
  /commitment/{commitmentId}:
    get:
      tags:
        - "commitment"
      summary: get commitment by id
      produces:
        - application/json
      parameters:
        - in: path
          name: commitmentId
          type: string
          required: true
          description: Id of a commitment 
      responses:
        200:
          description: get commitment successfully.
          schema:
            type: object
            example: {
              "heading": "string",
              "logo": "path",
              "detail": "string",              
            }
        400:
          description: commitment is not found.
  /admin/commitment:
    post:
      tags:
        - "commitment"
      summary: "Create a new commitment"
      consumes:
        - multipart/form-data
      parameters:
        - in: body
          name: commitment
          description: a new commitment.
          schema:
            type: object
            required:
              - heading
            properties:
              heading:
                type: string
              detail:
                type: string  
        - in: formData
          name: logo
          description: a logo commitment.
          type: file
      requestBody:
        content: 
          application/json:
            schema:            
              type: object
              properties:      
                name:           
                  type: string
                logo: 
                  type: string
                  format: base64
                detail:   
                  type: string
      responses:
        200:
          description: Create commitment successfully.
          schema:
            type: object
            example: {
              "heading": "string",
              "logo": "path",
              "detail": "string",
            }
        400:
          description: Create commitment failed.
  /admin/commitment/{commitmentId}:
    put:
      tags:
        - "commitment"
      summary: "Update a existing commitment"
      consumes:
        - multipart/form-data
      parameters:
        - in: path
          name: commitmentId
          schema: 
            type: string
          required: true
          description: commitment id
        - in: body
          name: commitment
          description: a existing commitment.
          schema:
            type: object
            required:
              - heading
            properties:
              heading:
                type: string
              detail:
                type: string
        - in: formData
          name: logo
          description: a logo commitment.
          type: file
      requestBody:
        content:
          application/json:
            schema:
              schema:
            type: object
            required:
              - heading
            properties:
              name:
                type: string
              logo:
                type: string
                format: base64 
              detail:
                type: string
      responses:
        200:
          description: Update commitment successfully.
          schema:
            type: object
            example: {
              "heading": "string",
              "logo": "path",
              "detail": "string",
            }
        400:
          description: Update commitment failed.

    delete:
      tags:
        - "commitment"
      summary: "Delete a existing commitment"
      produces:
        - application/json
      parameters:
        - in: path
          name: commitmentId
          type: string
          required: true
          description: Id of a commitment 
      responses:
        200:
          description: Delete commitment successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    description: Success message
        400:
          description: Update commitment failed.
  
  /partner:
    get:
      tags:
        - "partner"
      summary: get partners
      produces:
        - application/json
      parameters:
        - in: query
          name: page
          type: string
          description: num of page
        - in: query
          name: pageSize
          type: string
          description: number of partner in a page  
        - in: query
          name: sortBy
          type: string
          description: sort in order (name, -updatedAt)
        - in: query
          name: keyword
          type: string
          description: search by keyword
      responses:
        200:
          description: get partners successfully.
          schema:
            type: object
            example: {
              "name": "string",
              "logo": "path",
            }
        400:
          description: partner is not found.
  /partner/{partnerId}:
    get:
      tags:
        - "partner"
      summary: get partner by id
      produces:
        - application/json
      parameters:
        - in: path
          name: partnerId
          type: string
          required: true
          description: Id of a partner 
      responses:
        200:
          description: get partner successfully.
          schema:
            type: object
            example: {
              "name": "string",
              "logo": "path",
            }
        400:
          description: partnerId is not found.
  /admin/partner:
    post:
      tags:
        - "partner"
      summary: "Create a new partner"
      consumes:
        - multipart/form-data
      parameters:
        - in: body
          name: partner
          description: a new partner.
          schema:
            type: object
            required:
              - name
            properties:
              name:
                type: string
        - in: formData
          name: logo
          description: a logo commitment.
          type: file  
      requestBody:
        content: 
          multipart/form-data: 
            schema:            
              type: object
              properties:      
                name:           
                  type: string
                logo: 
                  type: string
                  format: base64
      responses:
        200:
          description: Create partner successfully.
          schema:
            type: object
            example: {
              "name": "string",
              "logo": "path",
            }
        400:
          description: Create partner failed.
  /admin/partner/{partnerId}:
    put:
      tags:
        - "partner"
      summary: "Update a existing commitment"
      consumes:
        - multipart/form-data
      parameters:
        - in: path
          name: partnerId
          schema: 
            type: string
          required: true
          description: partner id
        - in: body
          name: partner
          description: a existing partner.
          schema:
            type: object
            required:
              - name
            properties:
              name:
                type: string
        - in: formData
          name: logo
          description: a logo commitment.
          type: file
      requestBody:
        content: 
          multipart/form-data: 
            schema:            
              type: object
              properties:      
                name:           
                  type: string
                logo: 
                  type: string
                  format: base64
      responses:
        200:
          description: Update partner successfully.
          schema:
            type: object
            example: {
              "name": "string",
              "logo": "path",
            }
        400:
          description: Update partner failed.

    delete:
      tags:
        - "partner"
      summary: "Delete a existing partner"
      produces:
        - application/json
      parameters:
        - in: path
          name: partnerId
          type: string
          required: true
          description: partner Id
      responses:
        200:
          description: Delete partner successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    description: Success message
        400:
          description: Update partner failed.

  /admin/message:
    get:
      tags:
        - "message"
      summary: get message
      produces:
        - application/json
      parameters:
        - in: query
          name: page
          type: string
          description: num of page
        - in: query
          name: pageSize
          type: string
          description: number of message in a page          
        - in: query
          name: sortBy
          type: string
          description: sort in order (name, -updatedAt)
        - in: query
          name: keyword
          type: string
          description: search by keyword
        - in: query
          name: status
          type: string
          description: filter by status (seen/unseen)
      responses:
        200:
          description: get message successfully.
          schema:
            type: object
            example: {
              "name": "string",
              "email": "string",
              "phone": "string",    
              "message": "string",          
            }
        400:
          description: commitment is not found.  
  /admin/message/{messageId}:
    get:
      tags:
        - "message"
      summary: get message by id
      produces:
        - application/json
      parameters:
        - in: path
          name: messageId
          type: string
          required: true
          description: Id of a message 
      responses:
        200:
          description: get message successfully.
          schema:
            type: object
            example: {
              "name": "string",
              "email": "string",
              "phone": "string",    
              "message": "string",          
            }          
        400:
          description: message is not found.    
    put:
      tags:
        - "message"
      summary: "Update a existing message"
      consumes:
        - application/json
      parameters:
        - in: path
          name: messageId
          schema: 
            type: string
          required: true
          description: message id
        - in: body
          name: message
          description: a existing message.
          schema:
            type: object
            properties:
              name:
                type: string
              email:
                type: string 
              phone: 
                type: string
              message:
                type: string 
      responses:
        200:
          description: Update message successfully.
        400:
          description: Update message failed.
    delete:
      tags:
        - "message"
      summary: "Delete a existing message"
      produces:
        - application/json
      parameters:
        - in: path
          name: messageId
          type: string
          required: true
          description: Id of a message 
      responses:
        200:
          description: Delete message successfully.
        400:
          description: Update message failed.
  /message:
    post:
      tags:
        - "message"
      summary: "Create a new message"
      consumes:
        - application/json
      parameters:
        - in: body
          name: message
          description: a new message.
          schema:
            type: object
            required:
              - name, email, phone, message
            properties:
              name:
                type: string
              email:
                type: string 
              phone: 
                type: string
              message:
                type: string 
      responses:
        200:
          description: Send message successfully.
        400:
          description: Create message failed.   
  /admin/warehouse:
    post:
      tags:
        - "warehouse"
      summary: "Create a new warehouse"
      consumes:
        - application/json
      parameters:
        - in: body
          name: warehouse
          description: a new warehouse.
          schema:
            type: object      
            required: 
            - name, street, ward, district, province, phone     
            properties:
              name:
                type: string
              phone: 
                type: string
              street:
                type: string               
              ward:
                type: string 
              district: 
                type: string
              province:
                type: string 
      responses:
        200:
          description: Create new warehouse successfully.
        400:
          description: Create warehouse failed.
      security:
        - bearerAuth: []
  /admin/warehouse/{warehouseId}:
    put:
      put:
      tags:
        - "warehouse"
      summary: "Update a existing warehouse"
      consumes:
        - application/json
      parameters:
        - in: path
          name: warehouseId
          schema: 
            type: string
          required: true
          description: warehouse id
        - in: body
          name: warehouse
          description: a existing warehouse.
          schema:
            type: object
            properties:
              name:
                type: string
              phone: 
                type: string
              street:
                type: string               
              ward:
                type: string 
              district: 
                type: string
              province:
                type: string               
      responses:
        200:
          description: Update warehouse successfully.
        400:
          description: Update warehouse failed.
      security:
        - bearerAuth: []
    delete:
      tags:
        - "warehouse"
      summary: "Delete a existing warehouse"
      produces:
        - application/json
      parameters:
        - in: path
          name: warehouseId
          type: string
          required: true
          description: Id of a warehouse 
      responses:
        200:
          description: Delete warehouse successfully.
        400:
          description: Delete warehouse failed.
      security:
        - bearerAuth: []
  /warehouse:
    get:
      tags:
        - "warehouse"
      summary: get warehouse
      produces:
        - application/json
      parameters:
        - in: query
          name: page
          type: string
          description: num of page
        - in: query
          name: pageSize
          type: string
          description: number of warehouse in a page 
        - in: query
          name: district
          type: string
          description: district
        - in: query
          name: province
          type: string
          description: province
        - in: query
          name: sortBy
          type: string
          description: sort in order (name, -updatedAt)
      responses:
        200:
          description: get warehouse successfully.
          schema:
            type: object
            example: {
              "name": "string",
              "phone": "string",    
              "street": "string",   
              "ward" : "string",
              "district": "string",
              "province": "string",
              "lon": "string",
              "lat": "string",       
            }
        400:
          description: warehouse is not found.  
  /warehouse/{warehouseId}:
    get:
      tags:
        - "warehouse"
      summary: get warehouse by id
      produces:
        - application/json
      parameters:
        - in: path
          name: warehouseId
          type: string
          required: true
          description: Id of a warehouse 
      responses:
        200:
          description: get warehouse successfully.
          schema:
            type: object
            example: {
              "name": "string",
              "phone": "string",    
              "street": "string",   
              "ward" : "string",
              "district": "string",
              "province": "string",
              "lon": "string",
              "lat": "string",       
            }          
        400:
          description: warehouse is not found.    
  /participant:
     get:
      tags:
        - "participant"
      summary: get all participant
      produces:
        - application/json
      parameters:        
        - in: query
          name: limit
          type: string
          description: number of participant in a page         
        - in: query
          name: keyword
          type: string
          description: search by keyword
        - in: query
          name: sortBy
          type: string
          description: sort in order (name, -updatedAt)
      responses:
        200:
          description: get participant successfully.
          schema:
            type: object
            example: {
              "name": "string",
              "banner": "path",    
              "description": "string", 
            }
        400:
          description: participant is not found. 
  /participant/{participantId}:
    get:
      tags:
        - "participant"
      summary: get participant by id
      produces:
        - application/json
      parameters:
        - in: path
          name: participantId
          type: string
          required: true
          description: Id of a participant 
      responses:
        200:
          description: get participant successfully.
          schema:
            type: object
            example: {
              "name": "string",
              "banner": "path",    
              "description": "string",     
            }          
        400:
          description: participant is not found. 
  /participant/service/{serviceId}:
    get:
      tags:
        - "participant"
      summary: get list of participants by serviceId
      produces:
        - application/json
      parameters:
        - in: path
          name: serviceId
          type: string
          required: true
          description: Id of a service 
      responses:
        200:
          description: get participant successfully.
          schema:
            type: object
            example: {
              "name": "string",
              "banner": "path",    
              "description": "string",     
            }          
        400:
          description: participant is not found.
  /admin/participant/{serviceId}:
    post:
      tags:
        - "participant"
      summary: "Create a new participant"
      consumes:
        - multipart/form-data
        - application/json
      parameters:
        - in: path
          name: serviceId
          type: string
          required: true
          description: Id of a service 
        - in: body
          name: participant
          description: a new participant.
          schema:
            type: object
            required:
              - name, description
            properties:
              name:
                type: string
              description:
                type: string
        - in: formData
          name: banner
          description: banner of participant.
          type: file          
      requestBody:
        content: 
          multipart/form-data: 
            schema:            
              type: object
              properties:      
                name:           
                  type: string
                banner: 
                  type: string
                  format: base64
                description:
                  type: string
      responses:
        200:
          description: Create participant successfully.
          schema:
            type: object
            example: {
              "name": "string",
              "banner": "path",    
              "description": "string",     
            }        
        400:
          description: Create participant failed.
      security:
        - bearerAuth: []
  /admin/participant/{participantId}:
    put:
      tags:
        - "participant"
      summary: "Create a new participant"
      consumes:
        - multipart/form-data
      parameters:
        - in: path
          name: participantId
          type: string
          required: true
          description: Id of a participant 
        - in: body
          name: participant
          description: a new participant.
          schema:
            type: object            
            properties:
              name:
                type: string
              description:
                type: string
        - in: formData
          name: banner
          description: banner of participant.
          type: file          
      requestBody:
        content: 
          multipart/form-data: 
            schema:            
              type: object
              properties:      
                name:           
                  type: string
                banner: 
                  type: string
                  format: base64
                description:
                  type: string
      responses:
        200:
          description: Create participant successfully.
          schema:
            type: object
            example: {
              "name": "string",
              "banner": "path",    
              "description": "string",     
            }        
        400:
          description: Create participant failed.
      security:
        - bearerAuth: []
    delete:
      tags:
        - "participant"
      summary: "Delete a existing participant"
      produces:
        - application/json
      parameters:
        - in: path
          name: participantId
          type: string
          required: true
          description: Id of a participant 
      responses:
        200:
          description: Delete participant successfully.
        400:
          description: Delete participant failed.
      security:
        - bearerAuth: []
  
  /quote:
     get:
      tags:
        - "quote"
      summary: get all quote
      produces:
        - application/json
      parameters:        
        - in: query
          name: limit
          type: string
          description: number of participant in a page         
        - in: query
          name: keyword
          type: string
          description: search by keyword
        - in: query
          name: sortBy
          type: string
          description: sort in order (name, -updatedAt)
      responses:
        200:
          description: get quote successfully.
          schema:
            type: object
            example: {
              "name": "string",
              "description": "string", 
              "quote": "string",
              "avatar": "path",
            }
        400:
          description: quote is not found. 
  /quote/{quoteId}:
    get:
      tags:
        - "quote"
      summary: get quote by id
      produces:
        - application/json
      parameters:
        - in: path
          name: quoteId
          type: string
          required: true
          description: Id of a quote 
      responses:
        200:
          description: get quote successfully.
          schema:
            type: object
            example: {
              "name": "string",
              "description": "string", 
              "quote": "string",
              "avatar": "path",  
            }          
        400:
          description: quote is not found. 
  /quote/service/{serviceId}:
    get:
      tags:
        - "quote"
      summary: get list of quotes by serviceId
      produces:
        - application/json
      parameters:
        - in: path
          name: serviceId
          type: string
          required: true
          description: Id of a service 
      responses:
        200:
          description: get quote successfully.
          schema:
            type: object
            example: {
              "name": "string",
              "description": "string", 
              "quote": "string",
              "avatar": "path",    
            }          
        400:
          description: quote is not found.
  /admin/quote/{serviceId}:
    post:
      tags:
        - "quote"
      summary: "Create a new quote"
      consumes:
        - multipart/form-data
        - application/json
      parameters:
        - in: path
          name: serviceId
          type: string
          required: true
          description: Id of a service 
        - in: body
          name: quote
          description: a new quote.
          schema:
            type: object
            required:
              - name, description, quote
            properties:
              name:
                type: string
              description:
                type: string
              quote:
                type: string
        - in: formData
          name: avatar
          description: avatar of quote.
          type: file          
      requestBody:
        content: 
          multipart/form-data: 
            schema:            
              type: object
              properties:      
                name:           
                  type: string                
                description:
                  type: string
                quote:
                  type: string
                avatar: 
                  type: string
                  format: base64
      responses:
        200:
          description: Create quote successfully.
          schema:
            type: object
            example: {
              "name": "string",
              "description": "string", 
              "quote": "string",
              "avatar": "path",    
            }        
        400:
          description: Create quote failed.
      security:
        - bearerAuth: []
  /admin/quote/{quoteId}:
    put:
      tags:
        - "quote"
      summary: "Create a new quote"
      consumes:
        - multipart/form-data
      parameters:
        - in: path
          name: quoteId
          type: string
          required: true
          description: Id of a quote 
        - in: body
          name: quote
          description: a new quote.
          schema:
            type: object            
            properties:
              name:
                type: string
              description:
                type: string
              quote:
                type: string
        - in: formData
          name: avatar
          description: avatar of quote.
          type: file          
      requestBody:
        content: 
          multipart/form-data: 
            schema:            
              type: object
              properties:      
                name:           
                  type: string                
                description:
                  type: string
                quote:
                  type: string
                avatar: 
                  type: string
                  format: base64
      responses:
        200:
          description: Create quote successfully.
          schema:
            type: object
            example: {
              "name": "string",
              "description": "string", 
              "quote": "string",
              "avatar": "path",        
            }        
        400:
          description: Create quote failed.
      security:
        - bearerAuth: []
    delete:
      tags:
        - "quote"
      summary: "Delete a existing quote"
      produces:
        - application/json
      parameters:
        - in: path
          name: quoteId
          type: string
          required: true
          description: Id of a quote 
      responses:
        200:
          description: Delete quote successfully.
        400:
          description: Delete quote failed.
      security:
        - bearerAuth: []

  /career:
    get:
      tags:
        - "career"
      summary: get career information
      produces:
        - application/json
      parameters:
        - in: query
          name: pageSize
          type: string
          description: limit number of careers on a page
          parameters:
        - in: query
          name: page
          type: string
          description: num of page
      responses:
        200:
          description: get career information successfully.
          schema:
            type: object
            example: {
                  "name": "string",
                  "type": "string",
                  "description": "string",
                  "location": "string",
                  "state": "string",
                  "bonus": "string",
                  "deadline": "date",
                  "applicants": "object",
            }
        400:
          description: career information is not found.        
  /career/id/{careerId}:
    get:
      tags:
        - "career"
      summary: get career by id
      produces:
        - application/json
      parameters:
        - in: path
          name: careerId
          type: string
          required: true
          description: Id of a career
      responses:
        200:
          description: get career information successfully.
          schema:
            type: object
            example: {
              "name": "string",
              "type": "string",
              "description": "string",
              "location": "string",
              "state": "string",
              "bonus": "string",
              "deadline": "date",
              "applicants": "object",
            }
        400:
          description: Career does not exist.
        402:
          description: career information is not found.
    
  /career/search/{keyword}:
    
    get:
      tags:
        - "career"
      summary: get career by keyword
      produces:
        - application/json
      parameters:
        - in: path
          name: careerKeyword
          type: string
          required: true
          description: Keyword for matching careers
        - in: query
          name: pageSize
          type: string
          description: limit number of careers on a page
          parameters:
        - in: query
          name: page
          type: string
          description: num of page
      responses:
        200:
          description: get career information successfully.
          schema:
            type: object
            example: {
              "name": "string",
              "type": "string",
              "description": "string",
              "location": "string",
              "state": "string",
              "bonus": "string",
              "deadline": "date",
              "applicants": "object",
            }
        400:
          description: Career does not exist.
        402:
          description: career information is not found.
  
  /career/filter:
    get:
      tags:
        - "career"
      summary: get careers with filter option
      produces:
        - application/json
      parameters:
        - in: query
          name: careerFilter
          type: string
          required: true
          description: Filter for careers
        - in: query
          name: pageSize
          type: string
          description: limit number of careers on a page
          parameters:
        - in: query
          name: page
          type: string
          description: num of page
      responses:
        200:
          description: get career information successfully.
          schema:
            type: object
            example: {
              "name": "string",
              "type": "string",
              "description": "string",
              "location": "string",
              "state": "string",
              "bonus": "string",
              "deadline": "date",
              "applicants": "object",
            }
        400:
          description: career information is not found.

  /career/sort:
    get:
      tags:
        - "career"
      summary: get careers with sorting option
      produces:
        - application/json
      parameters:
        - in: query
          name: careerSort
          type: string
          required: true
          description: Sorting condition for careers
        - in: query
          name: pageSize
          type: string
          description: limit number of careers on a page
          parameters:
        - in: query
          name: page
          type: string
          description: num of page
      responses:
        200:
          description: get career information successfully.
          schema:
            type: object
            example: {
              "name": "string",
              "type": "string",
              "description": "string",
              "location": "string",
              "state": "string",
              "bonus": "string",
              "deadline": "date",
              "applicants": "object",
            }
        400:
          description: career information is not found.      
  /admin/career/{careerId}:
    post:
        tags:
          - "career"
        summary: "Create a new career"
        parameters:
          - in: body
            name: career
            description: a new career.
            schema:
              type: object
              required: true
              properties:
                name:
                  type: string
                type:
                  type: string
                description:
                  type: string
                location:
                  type: string
                state:
                  type: string
                bonus:
                  type: string
                deadline:
                  type: string
                departmentId:
                  type: string
        responses:
          200:
            description: Create career successfully.
            schema:
              type: object
              example: {
                  "name": "string",
                  "type": "string",
                  "description": "string",
                  "location": "string",
                  "state": "string",
                  "bonus": "string",
                  "deadline": "date",
                  "applicants": "object",
              }
          400:
            description: Create career failed.  
        security:
          - bearerAuth: []
    put:
      tags:
        - "career"
      summary: admin change career status
      produces:
        - application/json        
      consumes:
        - application/json
        - multipart/form-data
      parameters:
        - in: path
          name: careerId
          type: string
          required: true
          description: Id of a career
        - in: body
            name: career
            description: a new career.
            schema:
              type: object
              properties:
                name:
                  type: string
                type:
                  type: string
                description:
                  type: string
                location:
                  type: string
                state:
                  type: string
                bonus:
                  type: string
                deadline:
                  type: string
                departmentId:
                  type: string
      responses:
        200:
          description: change career status successfully.
        400:
          description: career cannot be found. 
      security:
        - bearerAuth: []                          
    delete:
      tags:
        - "career"
      summary: "Delete an existing career"
      produces:
        - application/json
      parameters:
        - in: path
          name: careerId
          type: string
          required: true
          description: Id of an career 
      responses:
        200:
          description: Delete career successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    description: Success message
            400:
              description: Delete career failed.      
      security:
        - bearerAuth: [] 

  /applicant: 
  
    post:
      tags:
      - "applicant"
      summary: "Register applicant"
      produces:
        - application/json
      consumes:
        - application/json
        - multipart/form-data
      parameters:
      - in: body
        name: applicant
        required: true
        schema:
          type: object
          properties:
            firstName:
              type: string
            lastName:
              type: string
            phoneNumber:
              type: string
            email:
              type: string
            source:
              type: string
              enum: ['friend', 'facebook', 'linkedin']
            message:
              type: string
            status:
              type: string
              enum: ['pending', 'accepted', 'rejected']
            careerId:
              type: string
      - in: formData
        name: file
        description: The CV file data to be sent by email
        required: true
        schema:
          type: file
      responses:
        200:
          description: applicant created successfully
          schema:
            type: object
            example: {
              "userId":"verifyId",
            }
        400:
          description: send cv failed



  /admin/applicant:
        get:
          tags:
            - "applicant"
          summary: get all applicants
          produces:
            - application/json
          responses:
            200:
              description: get applicants successfully.
              schema:
                type: object
                example: {
                  "firstName": "string",
                  "lastName": "string",
                  "phoneNumber": "string",
                  "email": "string",
                  "source": "string",
                  "message": "string",
                  "status": "string",
                }
            400:
              description: applicants are not found.
          security:
            - bearerAuth: [] 
  /admin/applicant/{applicantId}:
    put:
      tags:
        - "applicant"
      summary: admin change applicant status
      produces:
        - application/json
      consumes:
        - application/json
        - multipart/form-data
      parameters:
        - in: path
          name: applicantId
          type: string
          required: true
          description: Id of an applicant 
        - in: body
          schema:
            type: object
            properties:
              status:
                type: string
                enum: ['pending', 'accepted', 'rejected']
      responses:
        200:
          description: change applicant status successfully.
        400:
          description: applicant cannot be found.
      security:
        - bearerAuth: [] 
          
    delete:
      tags:
        - "applicant"
      summary: "Delete an existing applicant"
      produces:
        - application/json
      parameters:
        - in: path
          name: applicantId
          type: string
          required: true
          description: Id of an applicant 
      responses:
        200:
          description: Delete applicant successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    description: Success message
        400:
          description: Delete applicant failed.
      security:
        - bearerAuth: [] 
  /department:
    get:
      tags:
        - "department"
      summary: get department information
      produces:
        - application/json
      parameters:
        - in: query
          name: limit
          type: string
          description: limit number of departments 
      responses:
        200:
          description: get department information successfully.
          schema:
            type: object
            example: {
              "description": "string",
            }
        400:
          description: department information is not found.
          

  /department/{departmentId}:
    get:
      tags:
        - "department"
      summary: get department by id
      produces:
        - application/json
      parameters:
        - in: path
          name: departmentId
          type: string
          required: true
          description: Id of a department
      responses:
        200:
          description: get department successfully.
          schema:
            type: object
            example: {
              "name": "string",
              "description": "string",
              "location": "string",
              "director": "string",
              "scale": "string",
              "careers": "career",
            }
        400:
          description: departmentId is not found.


  /department/search/{keyword}:
    
    get:
      tags:
        - "department"
      summary: get department by keyword
      produces:
        - application/json
      parameters:
        - in: path
          name: departmentKeyword
          type: string
          required: true
          description: Keyword for matching departments
        - in: query
          name: pageSize
          type: string
          description: limit number of departments on a page
          parameters:
        - in: query
          name: page
          type: string
          description: num of page
      responses:
        200:
          description: get department information successfully.
          schema:
            type: object
            example: {
              "name": "string",
              "description": "string",
              "location": "string",
              "director": "string",
              "scale": "string",
              "careers": "career",
            }
        400:
          description: Department does not exist.
        402:
          description: department information is not found.
  /admin/department/{departmentId}:
    post:
      tags:
        - "department"
      summary: "Create a new department"
      parameters:
        - in: body
          name: department
          description: a new department.
        - in: body
          name: department
          schema:
            type: object
            required: true
            properties:
              name:
                type: string
              description:
                type: string
              location:
                type: string
              director:
                type: string
              scale:
                type: string
      responses:
        200:
          description: Create department successfully.
          schema:
            type: object
            example: {
                "name": "string",
                "description": "string",
                "location": "string",
                "director": "string",
                "scale": "string",
                "careers": "career",
            }
        400:
          description: Create department failed.
      security:
        - bearerAuth: [] 
    put:
      tags:
        - "department"
      summary: admin update department
      produces:
        - application/json
      consumes:
        - application/json
        - multipart/form-data
      parameters:
        - in: path
          name: departmentId
          type: string
          required: true
          description: Id of a department
        - in: body
          name: department
          schema:
            type: object
            required: true
            properties:
              name:
                type: string
              description:
                type: string
              location:
                type: string
              director:
                type: string
              scale:
                type: string
      responses:
        200:
          description: change department update successfully.
        400:
          description: department cannot be found.
      security:
        - bearerAuth: [] 
          
    delete:
      tags:
        - "department"
      summary: "Delete an existing department"
      produces:
        - application/json
      parameters:
        - in: path
          name: departmentId
          type: string
          required: true
          description: Id of a department
      responses:
        200:
          description: Delete department successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    description: Success message
        400:
          description: Delete department failed.
      security:
        - bearerAuth: [] 
  /feature:
    get:
      tags:
        - "feature"
      summary: get feature information
      produces:
        - application/json
      parameters:
        - in: query
          name: pageSize
          type: string
          description: limit number of features on a page
          parameters:
        - in: query
          name: page
          type: string
          description: num of page
        - in: query
          name: keyword
          type: string
          description: search by keyword
        - in: query
          name: name
          type: string
          description: filter by name
        - in: query
          name: detail
          type: string
          description: filter by detail 
        - in: query
          name: sortBy
          type: string
          description: sort in order (name, -updatedAt)
      responses:
        200:
          description: get feature information successfully.
          schema:
            type: object
            example: {
                  "name": "string",
                  "logo": "path",
                  "detail": "string",
            }
        400:
          description: career information is not found.  
  /feature/{featureId}:
    get:
      tags:
        - "feature"
      summary: get feature by id
      produces:
        - application/json
      parameters:
        - in: path
          name: featureId
          type: string
          required: true
          description: Id of a feature 
      responses:
        200:
          description: get feature successfully.
          schema:
            type: object
            example: {
              "name": "string",
              "logo": "path",
              "detail": "string",              
            }
        400:
          description: feature is not found.
  /feature/service/{serviceId}:
    get:
      tags:
        - "feature"
      summary: get features by service id
      produces:
        - application/json
      parameters:
        - in: query
          name: pageSize
          type: string
          description: limit number of features on a page
          parameters:
        - in: query
          name: page
          type: string
          description: num of page
        - in: path
          name: serviceId
          type: string
          required: true
          description: Id of a service 
      responses:
        200:
          description: get feature successfully.
          schema:
            type: object
            example: {
              "name": "string",
              "logo": "path",
              "detail": "string",              
            }
        400:
          description: feature is not found.
  /admin/feature/{serviceId}:
    post:
      tags:
        - "feature"
      summary: "Create a new feature"
      consumes:
        - multipart/form-data
      parameters:
        - in: path
          name: serviceId
          schema: 
            type: string
          required: true
          description: service id to add feature in
        - in: body
          name: feature
          description: a new feature.
          schema:
            type: object
            required:
              - name
              - detail
            properties:
              name:
                type: string
              detail:
                type: string  
        - in: formData
          name: logo
          type: file
          description: a logo for feature.
          required: true
      requestBody:
        content: 
          multipart/form-data:
            schema:            
              type: object
              properties:      
                name:           
                  type: string
                detail:   
                  type: string
                logo: 
                  type: string
                  format: binary
      responses:
        200:
          description: Create feature successfully.
          schema:
            type: object
            example: {
              "name": "string",
              "logo": "path",
              "detail": "string",
            }
        400:
          description: Create feature failed.
      security:
        - bearerAuth: []
  /admin/feature/{featureId}:
    put:
      tags:
        - "feature"
      summary: "Update a existing feature"
      consumes:
        - multipart/form-data
      parameters:
        - in: path
          name: featureId
          schema: 
            type: string
          required: true
          description: feature id
        - in: body
          name: feature
          description: a existing feature.
          schema:
            type: object
            required:
              - name
              - detail
            properties:
              name:
                type: string
              detail:
                type: string
        - in: formData
          name: logo
          type: file
          description: a logo for feature.
          required: true
      requestBody:
        content:
          application/json:
            schema:
         #     schema:
              type: object
              required:
                - name
                - detail
              properties:
                name:
                  type: string
                logo:
                  type: string
                  format: base64 
                detail:
                  type: string
      responses:
        200:
          description: Update feature successfully.
          schema:
            type: object
            example: {
              "name": "string",
              "logo": "path",
              "detail": "string",
            }
        400:
          description: Update feature failed.
      security:
        - bearerAuth: []
    delete:
      tags:
        - "feature"
      summary: "Delete a existing feature"
      produces:
        - application/json
      parameters:
        - in: path
          name: featureId
          type: string
          required: true
          description: Id of a feature 
      responses:
        200:
          description: Delete feature successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    description: Success message
        400:
          description: Update feature failed.
      security:
        - bearerAuth: []
securityDefinitions:
  bearerAuth:
    type: "apiKey"
    name: "Authorization"
    in: "header"

