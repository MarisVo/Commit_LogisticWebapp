swagger: "2.0"
info:
  description: "APIs of Logistic Web Service"
  version: "1.0.0"
  title: "Logistic Web Service"
  contact:
    email: "d.bed11@gptgdt.net"
host: "localhost:8000"
basePath: "/api"
schemes:
- "http"
- "https"
tags:
- name: "auth"
  description: "Endpoint Authentication"
- name: "about"
  description: "Endpoint AboutUs"
- name: "contactUs"
  description: "Endpoint ContactUs"
- name: "tracking"
  description: "Tracking feature"
- name: "public"
  description: "Public assets of web service"
- name: "commitment"
  description: "Endpoint Commitment"
- name: "partner"
  description: "Endpoint Partner"
- name: "message"
  description: "Endpoint Message"
- name: "consultancy"
  description: "Endpoint Consultancy"
paths:
  /auth/verify-token:
    post:
      tags:
      - "auth"
      summary: "Verify the post token, if it's expired, refresh token"
      produces:
        - application/json
      consumes:
        - application/json
      parameters:
      - in: body
        name: token
        required: true
        schema:
          type: object
          properties:
            accessToken:
              type: string
            refreshToken:
              type: string
      responses:
        200:
          description: Verify token successfully.
          schema:
            type: object
            example: {
              "accessToken":"123456",
              "user":{
                "id":"userId",
                "email":"email",
                "phone":"phone",
                "role":"role",
              }
            }
        401:
          description: Unauthorized.
  /auth/register:
    post:
      tags:
      - "auth"
      summary: "Register customer"
      produces:
        - application/json
      consumes:
        - application/json
        - multipart/form-data
      parameters:
      - in: body
        name: customer
        required: true
        schema:
          type: object
          properties:
            name:
              type: string
            email:
              type: string
            phone:
              type: string
            password:
              type: string
            address:
              type: string
            description:
              type: string
            customer_type:
              type: string
              enum: ['business', 'passers', 'intermediary']
            verify_op:
              type: string
              enum: ['email', 'phone']
      responses:
        200:
          description: send otp code successfully.
          schema:
            type: object
            example: {
              "userId":"verifyId",
            }
        400:
          description: Send OTP failed.
  /auth/verify-otp:
    post:
      tags:
        - "auth"
      summary: Verify OTP send through email/phone number.
      consumes:
        - application/json
      parameters:
      - in: body
        name: otp
        required: true
        schema:
          type: object
          properties:
            userId:
              type: string
            otp:
              type: string
      responses:
        200:
          description: user registered successfully.
        400:
          description: validate failed.
  /auth/update-otp:
    post:
      tags:
        - "auth"
      summary: Update OTP send through email/phone number.
      produces:
        - application/json
      consumes:
        - application/json
      parameters:
      - in: body
        name: otp
        required: true
        schema:
          type: object
          properties:
            userId:
              type: string
            verify_op:
              type: string
              enum: ['email','phone']
      responses:
        200:
          description: update otp successfully.
        400:
          description: Send OTP failed.
  /auth/login:
    post:
      tags:
        - "auth"
      summary: Customer login with email/phone and password.
      produces:
        - application/json
      consumes:
        - application/json
        - multipart/form-data
      parameters:
      - in: body
        name: user
        required: true
        schema:
          type: object
          properties:
            email:
              type: string
            phone:
              type: string
            password:
              type: string
      responses:
        200:
          description: Login successfully.
          schema:
            type: object
            example: {
              "accessToken":"string",
              "refreshToken":"string",
              "user": {
                "id":"string",
                "email":"string",
                "phone":"string",
                "role":{},
              }
            }
        400:
          description: email/phone or password is wrong.
        403:
          description: your role is not valid. access denied.
  /auth/staff-login:
    post:
      tags:
        - "auth"
      summary: Staff login with email/phone and password.
      produces:
        - application/json
      consumes:
        - application/json
        - multipart/form-data
      parameters:
      - in: body
        name: user
        required: true
        schema:
          type: object
          properties:
            email:
              type: string
            phone:
              type: string
            password:
              type: string
      responses:
        200:
          description: Login successfully.
          schema:
            type: object
            example: {
              "accessToken":"string",
              "refreshToken":"string",
              "user": {
                "id":"string",
                "email":"string",
                "phone":"string",
                "role":{},
              }
            }
        400:
          description: email/phone or password is wrong.
        403:
          description: your role is not valid. access denied.
  /auth/forgot-pw:
    post:
      tags:
        - auth
      summary: help users renew their password
      produces:
        - application/json
      consumes:
        - application/json
        - multipart/form-data
      parameters:
      - in: body
        name: info
        required: true
        schema:
          type: object
          properties:
            email:
              type: string
            phone:
              type: string
      responses:
        200:
          description: generate new password successfully.
        400:
          description: send new password failed.
        404:
          description: email/phone doesn't exist.
  /auth/change-pw:
    put:
      tags:
        - auth
      summary: user change current password
      produces:
        - application/json
      consumes:
        - application/json
        - multipart/form-data
      parameters:
      - in: body
        name: info
        required: true
        schema:
          type: object
          properties:
            oldPw:
              type: string
            newPw:
              type: string
            verify_password:
              type: string
      responses:
        200:
          description: change your password successfully.
        400:
          description: current password isn't correct.
      security:
        - bearerAuth: []
  /auth/logout:
    post:
      tags:
        - auth
      summary: user log out
      consumes:
        - application/json
      parameters:
      - in: body
        name: token
        required: true
        schema:
          type: object
          properties:
            refreshToken:
              type: string
      responses:
        200:
          description: log out successfully. see you soon.
        401:
          description: refresh token is invalid.
      security:
        - bearerAuth: []
  /admin/auth/register:
    post:
      tags:
        - auth
      summary: create a new staff
      consumes:
        - application/json
      parameters:
      - in: body
        name: staff informations
        required: true
        schema:
          type: object
          properties:
            name:
              type: string
            email:
              type: string
            password:
              type: string
            phone:
              type: string
            staff_type:
              type: string
              enum: ['admin','driver','shipper','storekeeper','staff']
      responses:
        200:
          description: user registered successfully.
        400:
          description: user is exist
      security:
        - bearerAuth: []
  /admin/auth/unaccepted-register:
    get:
      tags:
        - auth
      summary: get list of unaccepted registers of business account
      produces:
        - application/json
      responses:
        200:
          description: success
          schema:
            type: array
            example: {
              "data": ["customer1","customer2"]
            }
      security:
        - bearerAuth: []
  /admin/auth/accept-register/{customerId}:
    put:
      tags:
        - auth
      summary: accept active the business's register
      consumes:
        - application/json
      parameters:
      - in: path
        name: customerId
        required: true
        type: string
        description: Business's ID
      responses:
        200:
          description: accepted successfully.
        400:
          description: this customer does not exist or was accepted register.
      security:
        - bearerAuth: []
  /about:
    get:
      tags:
        - about
      summary: get aboutUs information
      produces:
        - application/json
      responses:
        200:
          description: get about information successfully.
          schema:
            type: object
            example: {
              "description": "string",
              "vision": "string",
              "values": "string",
              "logo": "path",
              "banners": ["path1", "path2"],
            }
        400:
          description: about information is not found.
  /admin/about/logo:
    post:
      tags:
        - about
      summary: upload logo aboutUs
      consumes:
        - multipart/form-data
      parameters:
      - in: body
        name: logo
        required: true
        description: file
        schema:
          type: string
      responses:
        200:
          description: upload logo successfully.
      security:
        - bearerAuth: []
  /admin/about/banners:
    post:
      tags:
        - about
      summary: upload banners aboutUs
      consumes:
        - multipart/form-data
      parameters:
      - in: body
        name: banners
        required: true
        description: array of files
        schema:
          type: array
      responses:
        200:
          description: upload banners successfully.
      security:
        - bearerAuth: []
  /admin/about:
    post:
      tags:
        - about
      summary: update aboutUs informations
      consumes:
        - application/json
      parameters:
      - in: body
        name: about informations
        required: true
        schema:
          type: object
          properties:
            description:
              type: string
            vision:
              type: string
            values:
              type: string
      responses:
        200:
          description: set about-us information successfully.
      security:
        - bearerAuth: []
  /contactUs:
    get:
      tags:
        - contactUs
      summary: get contactUs information
      produces:
        - application/json
      responses:
        200:
          description: get contact information successfully.
          schema:
            type: object
            example: {
              "address":"string",
              "phone":"phone",
              "email":"email",
              "facebook":"url",
              "instagram":"url",
              "tiktok":"url",
              "youtube":"url",
            }
        400:
          description: contact information is not found.
  /admin/contactUs:
    post:
      tags:
        - contactUs
      summary: update contactUs informations
      consumes:
        - application/json
      parameters:
      - in: body
        name: contact informations
        required: true
        schema:
          type: object
          properties:
            address:
              type: string
            phone:
              type: string
            email:
              type: string
            facebook:
              type: string
            instagram:
              type: string
            tiktok:
              type: string
            youtube:
              type: string
      responses:
        200:
          description: set contact-us information successfully.
      security:
        - bearerAuth: []
  /tracking/postage:
    post:
      tags:
        - tracking
      summary: customer look up a postage
      produces:
        - application/json
      consumes:
        - application/json
        - multipart/form-data
      parameters:
      - in: body
        name: information
        required: true
        schema:
          type: object
          properties:
            formProvince:
              type: string
            fromDistrict:
              type: string
            fromWard:
              type: string
            toProvince:
              type: string
            toDistrict:
              type: string
            toWard:
              type: string
            unit:
              type: string
              enum: ['kg','m3','ton']
            quantity:
              type: number
            serviceId:
              type: string
            serviceName:
              type: string
      responses:
        200:
          description: calculate shipment fee successfully.
          schema:
            type: object
            example: {
              "result": 400000,
            }
        400:
          description: the service is not exist. / the service don't support this road.
  /tracking/order/{lstOrderId}:
    get:
      tags:
        - tracking
      summary: get list of order
      produces:
        - application/json
      parameters:
      - in: path
        name: lstOrderId
        type: string
        required: true
        description: string of list of OrderIDs, which seperate by '&'
      responses:
        200:
          description: request successfully
          schema:
            type: object
            example: {
              "orders": ["order1", "order2"],
              "success": 5,
              "failure": 2,
            }
  /tracking/warehouse:
    get:
      tags:
        - tracking
      summary: get list of warehouses by province and district query
      produces:
        - application/json
      parameters:
      - in: query
        name: province
        type: string
        required: true
      - in: query
        name: district
        type: string
        required: true
      responses:
        200:
          description: request successfully
          schema:
            type: object
            example: {
              "warehouses": ['warehouse1', 'warehouse2']
            }
  /tracking/service/{serviceId}:
    get:
      tags:
        - tracking
      summary: get pricelist of service
      produces:
        - application/json
      parameters:
      - in: path
        name: serviceId
        type: string
        required: true
        description: serviceId of request service
      responses:
        200:
          description: request successfully
          schema:
            type: object
            example: {
              "serviceWithUniquePriceFiles": ["pricelist1","pricelist2"]
            }
        400:
          description: not exist.
  /public/uploads/{dirName}/{fileName}:
    get:
      tags:
        - public
      summary: get uploaded resource
      parameters:
      - in: path
        name: dirName
        type: string
        required: true
        description: directory name of request file
      - in: path
        name: fileName
        type: string
        required: true
        description: file name of request file
      responses:
        200:
          description: resource file downloaded
          schema:
            type: file
  /public/{dirName}/{fileName}:
    get:
      tags:
        - public
      summary: get public assets
      parameters:
      - in: path
        name: dirName
        type: string
        required: true
        description: directory name of request file
      - in: path
        name: fileName
        type: string
        required: true
        description: file name of request file
      responses:
        200:
          description: resource file downloaded
          schema:
            type: file
  /commitment:
    get:
      tags:
        - "commitment"
      summary: get commitments
      produces:
        - application/json
      parameters:
        - in: query
          name: limit
          type: string
          description: limit number of commitment
      responses:
        200:
          description: get commitments successfully.
          schema:
            type: object
            example: {
              "heading": "string",
              "logo": "path",
              "detail": "string",              
            }
        400:
          description: commitment is not found.
  /commitment/{commitmentId}:
    get:
      tags:
        - "commitment"
      summary: get commitment by id
      produces:
        - application/json
      parameters:
        - in: path
          name: commitmentId
          type: string
          required: true
          description: Id of a commitment 
      responses:
        200:
          description: get commitment successfully.
          schema:
            type: object
            example: {
              "heading": "string",
              "logo": "path",
              "detail": "string",              
            }
        400:
          description: commitment is not found.
  /admin/commitment:
    post:
      tags:
        - "commitment"
      summary: "Create a new commitment"
      consumes:
        - multipart/form-data
      parameters:
        - in: body
          name: commitment
          description: a new commitment.
          schema:
            type: object
            required:
              - heading
            properties:
              heading:
                type: string
              detail:
                type: string  
        - in: formData
          name: logo
          description: a logo commitment.
          type: file
      requestBody:
        content: 
          application/json:
            schema:            
              type: object
              properties:      
                name:           
                  type: string
                logo: 
                  type: string
                  format: base64
                detail:   
                  type: string
      responses:
        200:
          description: Create commitment successfully.
          schema:
            type: object
            example: {
              "heading": "string",
              "logo": "path",
              "detail": "string",
            }
        400:
          description: Create commitment failed.
      security:
        - bearerAuth: []
  /admin/commitment/{commitmentId}:
    put:
      tags:
        - "commitment"
      summary: "Update a existing commitment"
      consumes:
        - multipart/form-data
      parameters:
        - in: path
          name: commitmentId
          schema: 
            type: string
          required: true
          description: commitment id
        - in: body
          name: commitment
          description: a existing commitment.
          schema:
            type: object
            required:
              - heading
            properties:
              heading:
                type: string
              detail:
                type: string
        - in: formData
          name: logo
          description: a logo commitment.
          type: file
      requestBody:
        content:
          application/json:
            schema:
              schema:
            type: object
            required:
              - heading
            properties:
              name:
                type: string
              logo:
                type: string
                format: base64 
              detail:
                type: string
      responses:
        200:
          description: Update commitment successfully.
          schema:
            type: object
            example: {
              "heading": "string",
              "logo": "path",
              "detail": "string",
            }
        400:
          description: Update commitment failed.
      security:
        - bearerAuth: []

    delete:
      tags:
        - "commitment"
      summary: "Delete a existing commitment"
      produces:
        - application/json
      parameters:
        - in: path
          name: commitmentId
          type: string
          required: true
          description: Id of a commitment 
      responses:
        200:
          description: Delete commitment successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    description: Success message
        400:
          description: Update commitment failed.
      security:
        - bearerAuth: []
  /partner:
    get:
      tags:
        - "partner"
      summary: get partners
      produces:
        - application/json
      parameters:
        - in: query
          name: limit
          type: string
          description: limit number of partners 
      responses:
        200:
          description: get partners successfully.
          schema:
            type: object
            example: {
              "name": "string",
              "logo": "path",
            }
        400:
          description: partner is not found.
  /partner/{partnerId}:
    get:
      tags:
        - "partner"
      summary: get partner by id
      produces:
        - application/json
      parameters:
        - in: path
          name: partnerId
          type: string
          required: true
          description: Id of a partner 
      responses:
        200:
          description: get partner successfully.
          schema:
            type: object
            example: {
              "name": "string",
              "logo": "path",
            }
        400:
          description: partnerId is not found.
  /admin/partner:
    post:
      tags:
        - "partner"
      summary: "Create a new partner"
      consumes:
        - multipart/form-data
      parameters:
        - in: body
          name: partner
          description: a new partner.
          schema:
            type: object
            required:
              - name
            properties:
              name:
                type: string
        - in: formData
          name: logo
          description: a logo commitment.
          type: file  
      requestBody:
        content: 
          multipart/form-data: 
            schema:            
              type: object
              properties:      
                name:           
                  type: string
                logo: 
                  type: string
                  format: base64
      responses:
        200:
          description: Create partner successfully.
          schema:
            type: object
            example: {
              "name": "string",
              "logo": "path",
            }
        400:
          description: Create partner failed.
      security:
        - bearerAuth: []
  /admin/partner/{partnerId}:
    put:
      tags:
        - "partner"
      summary: "Update a existing commitment"
      consumes:
        - multipart/form-data
      parameters:
        - in: path
          name: partnerId
          schema: 
            type: string
          required: true
          description: partner id
        - in: body
          name: partner
          description: a existing partner.
          schema:
            type: object
            required:
              - name
            properties:
              name:
                type: string
        - in: formData
          name: logo
          description: a logo commitment.
          type: file
      requestBody:
        content: 
          multipart/form-data: 
            schema:            
              type: object
              properties:      
                name:           
                  type: string
                logo: 
                  type: string
                  format: base64
      responses:
        200:
          description: Update partner successfully.
          schema:
            type: object
            example: {
              "name": "string",
              "logo": "path",
            }
        400:
          description: Update partner failed.
      security:
        - bearerAuth: []

    delete:
      tags:
        - "partner"
      summary: "Delete a existing partner"
      produces:
        - application/json
      parameters:
        - in: path
          name: partnerId
          type: string
          required: true
          description: partner Id
      responses:
        200:
          description: Delete partner successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    description: Success message
        400:
          description: Update partner failed.
      security:
        - bearerAuth: []
  /admin/message:
    get:
      tags:
        - "message"
      summary: get message
      produces:
        - application/json
      parameters:
        - in: query
          name: page
          type: string
          description: num of page
        - in: query
          name: pageSize
          type: string
          description: number of message in a page  
      responses:
        200:
          description: get message successfully.
          schema:
            type: object
            example: {
              "name": "string",
              "email": "string",
              "phone": "string",    
              "message": "string",          
            }
        400:
          description: commitment is not found.  
      security:
        - bearerAuth: []
  /admin/message/{messageId}:
    get:
      tags:
        - "message"
      summary: get message by id
      produces:
        - application/json
      parameters:
        - in: path
          name: messageId
          type: string
          required: true
          description: Id of a message 
      responses:
        200:
          description: get message successfully.
          schema:
            type: object
            example: {
              "name": "string",
              "email": "string",
              "phone": "string",    
              "message": "string",          
            }          
        400:
          description: message is not found.    
      security:
        - bearerAuth: []
    put:
      tags:
        - "message"
      summary: "Update a existing message"
      consumes:
        - application/json
      parameters:
        - in: path
          name: messageId
          schema: 
            type: string
          required: true
          description: message id
        - in: body
          name: message
          description: a existing message.
          schema:
            type: object
            properties:
              name:
                type: string
              email:
                type: string 
              phone: 
                type: string
              message:
                type: string 
      responses:
        200:
          description: Update message successfully.
        400:
          description: Update message failed.
      security:
        - bearerAuth: []
    delete:
      tags:
        - "message"
      summary: "Delete a existing message"
      produces:
        - application/json
      parameters:
        - in: path
          name: messageId
          type: string
          required: true
          description: Id of a message 
      responses:
        200:
          description: Delete message successfully.
        400:
          description: Update message failed.
      security:
        - bearerAuth: []
  /message:
    post:
      tags:
        - "message"
      summary: "Create a new message"
      consumes:
        - application/json
      parameters:
        - in: body
          name: message
          description: a new message.
          schema:
            type: object
            required:
              - name, email, phone, message
            properties:
              name:
                type: string
              email:
                type: string 
              phone: 
                type: string
              message:
                type: string 
      responses:
        200:
          description: Send message successfully.
        400:
          description: Create message failed.   
  /admin/consultancy:
    get:
      tags:
        - "consultancy"
      summary: get consultancy
      produces:
        - application/json
      parameters:
        - in: query
          name: page
          type: string
          description: num of page
        - in: query
          name: pageSize
          type: string
          description: number of consultancy in a page  
      responses:
        200:
          description: get consultancy successfully.
          schema:
            type: object
            example: {
              "name": "string",
              "email": "string",
              "phone": "string",
              "service" : "string",
              "fulladdress" : "string",
              "parcel": "string",
              "quantity": number,    
            }
        400:
          description: consultancy is not found.  
      security:
        - bearerAuth: []
  /admin/consultancy/{consultancyId}:
    get:
      tags:
        - "consultancy"
      summary: get consultancy by id
      produces:
        - application/json
      parameters:
        - in: path
          name: consultancyId
          type: string
          required: true
          description: Id of a consultancy 
      responses:
        200:
          description: get consultancy successfully.
          schema:
            type: object
            example: {
              "name": "string",
              "email": "string",
              "phone": "string",
              "service" : "string",
              "fulladdress" : "string",
              "parcel": "string",
              "quantity": "string",    
            }          
        400:
          description: consultancy is not found.    
      security:
        - bearerAuth: []
    put:
      tags:
        - "consultancy"
      summary: "Update a existing consultancy"
      consumes:
        - application/json
      parameters:
        - in: path
          name: consultancyId
          schema: 
            type: string
          required: true
          description: consultancy id
        - in: body
          name: consultancy
          description: a existing consultancy.
          schema:
            type: object
            properties:
              service:
                type: string
              name:
                type: string
              email:
                type: string 
              phone: 
                type: string              
              fulladdress:
                type: string 
              parcel: 
                type: string
              quantity:
                type: number 
              solved_status:
                type: boolean

      responses:
        200:
          description: Update consultancy successfully.
        400:
          description: Update consultancy failed.
      security:
        - bearerAuth: []
    delete:
      tags:
        - "consultancy"
      summary: "Delete a existing consultancy"
      produces:
        - application/json
      parameters:
        - in: path
          name: consultancyId
          type: string
          required: true
          description: Id of a consultancy 
      responses:
        200:
          description: Delete consultancy successfully.
        400:
          description: Update consultancy failed.
      security:
        - bearerAuth: []
  /consultancy:
    post:
      tags:
        - "consultancy"
      summary: "Create a new consultancy"
      consumes:
        - application/json
      parameters:
        - in: body
          name: consultancy
          description: a new consultancy.
          schema:
            type: object            
            properties:
              service:
                type: string
              name:
                type: string               
              email:
                type: string 
              phone: 
                type: string
              fulladdress:
                type: string 
              parcel: 
                type: string
              quantity:
                type: number 
      responses:
        200:
          description: Send consultancy successfully.
        400:
          description: Create consultancy failed.   
securityDefinitions:
  bearerAuth:
    type: "apiKey"
    name: "Authorization"
    in: "header"
